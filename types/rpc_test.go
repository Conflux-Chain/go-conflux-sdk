package types

import (
	"encoding/json"
	"testing"

	"github.com/Conflux-Chain/go-conflux-sdk/utils"
	"github.com/stretchr/testify/assert"
)

func TestJsonStatus(t *testing.T) {
	j := `{"bestHash": "0x3370751173cae9b37ec171f5fc234d58c597138336a23d26ce9b34fa907244af","blockNumber": "0x4b983fe","chainId": "0x1","epochNumber": "0x3c097d3","ethereumSpaceChainId": "0x47","latestCheckpoint": "0x3bf2ae0","latestConfirmed": "0x3c09784","latestFinalized": "0x3c0954c","latestState": "0x3c097cf","networkId": "0x1","pendingTxNumber": "0x0"}`
	s := Status{}
	e := utils.JSONUnmarshal([]byte(j), &s)
	if e != nil {
		t.Fatal(e)
	}
	// fmt.Printf("%+v\n", s)
}

func TestJsonEpochReceiptProof(t *testing.T) {
	expect := `{"block_index_proof":[{"childrenTable":["0xbdde2687d1e994a5707bdbf0e944c511e06d429696d026d0f32531d82449799f","0xe7bdaebfc21beb9a4994090b8f0c64998f7e162892d492559af9f0ac9ddecf4a","0xbdde2687d1e994a5707bdbf0e944c511e06d429696d026d0f32531d82449799f","0xd294b69af8f1016d5c0fbb3b58cafaeef9a631be2426a4090a0f65b8e6a92b54","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"],"compressedPath":{"pathMask":"0xff","pathSlice":"0x00"},"merkleHash":"0x42e6143536a27fdddf6cbbc568b8ee990eebe64aaf3b922a6183b0bf0595aa29","mptValue":null},{"childrenTable":[],"compressedPath":{"pathMask":"0x0","pathSlice":"0x"},"merkleHash":"0xd294b69af8f1016d5c0fbb3b58cafaeef9a631be2426a4090a0f65b8e6a92b54","mptValue":"0xd353c56eeab4e572b2caf1322e2bef04794767998e641d5b7dc6d79f6f1383d7"}],"block_receipt_proof":[{"childrenTable":["0xd704de27c7af05de0aa4fc129cb60ccb8267c5775f6229cfc3ad29b96c795dfe","0x0f83fdbc428c1b8914348c3d012d0dc400be5ac9dfeb2547cb40cc8e4c96a381","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470"],"compressedPath":{"pathMask":"0xff","pathSlice":"0x00"},"merkleHash":"0xd353c56eeab4e572b2caf1322e2bef04794767998e641d5b7dc6d79f6f1383d7","mptValue":null},{"childrenTable":[],"compressedPath":{"pathMask":"0x0","pathSlice":"0x"},"merkleHash":"0x0f83fdbc428c1b8914348c3d012d0dc400be5ac9dfeb2547cb40cc8e4c96a381","mptValue":"0xf9026e830179a48644d3b119180000bf90158f8fc940888000000000000000000000000000000000006f863a0124d1efd3ac32fa6aadb7a06e066c113471e0411fb56a5079cedbc3cdf7796e4a02afd8c286c4c9fc1a5e3fc87ba7206a538a95aa8000000000000000000000000a0804884d92f6518045deed6bc3fca435c1bafe157000000000000000000000000b88000000000000000000000000000000000000000000000005ab19d864976c7c000000000000000000000000000000000000000000000000000000000000000045000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000f858940888000000000000000000000000000000000006e1a0bc11eabb6efd378a0a489b58a574c6e0d0403060e8a8c7b8eab45db47900edfea000000000000000000000000000000000000000000000000000000000000000018000c0c0"}]}`
	var erp EpochReceiptProof
	err := utils.JSONUnmarshal([]byte(expect), &erp)
	assert.NoError(t, err)

	actual, err := json.Marshal(erp)
	assert.NoError(t, err)

	fExpect, fActual := utils.FormatJson(expect), utils.FormatJson(string(actual))
	assert.Equal(t, fExpect, fActual)
}
